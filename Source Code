
<!DOCTYPE html>
<html>
	<head>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<title>Space Shooter</title>
		<style>
			canvas {
				padding: 0;
				margin: auto;
				display: block;
				border: 1px solid #d3d3d3;
				background-color: #f1f1f1;
			}
		</style>
	</head>
	<body onload="runGame()">
		<script>
			//MAKE ENEMIES STRONGER AFTER TIME
			//CREATE WEAPON UPGRADE SYSTEM
			//MAKE NEW ENEMIES
			//player variables
			var player;
			var life;
			var lives = 3;
			var invulnerability = false;
			var isShooting = false;
			var playerBullets = [];
			var bulletDamage = 0.5;
			var shotFrame = 0;
			
			//enemy variables
			var basicEnemies = [];
			var basicBullets = [];
			var chargerEnemies = [];
			var lateralEnemies = [];
			var lateralTopBullets = [];
			var lateralBottomBullets = [];
			var bouncerEnemies = [];
			var snakeEnemies = [];
			var snakeCount;
			var snakeY;
			var blob1Enemies = [];
			var blobTop2Enemies = [];
			var blobBottom2Enemies = [];
			var blobTop3Enemies = [];
			var blobBottom3Enemies = [];
			var kamikazeEnemies = [];
			var kamikazeExplosion = [];
			var explodeDelay;
			var dashEnemies = [];
			var dashDelay;
			var dashX;
			var dashY;
			var flamethrowerEnemies = [];
			var flamethrowerBullets = [];
			var barrierEnemies = [];
			var barrierLazer = [];
			var entity = [];
			var entityBullets = [];
			var entityDelay;
			var entityCount;
			var entityTag;
			var entityCorner;
			var entityColor;
			var entityNova = 38;
			
			//pick-up variables
			var pickUps = [];
			var gunType = 0;
			var novaNum = 0;
			var novaDelay;
			var beamStage = [];
			var beamDelay;
			var beamCharge;
			var beamFull = false;
			var shootBeam = false;
			var shootBeamDelay;
			
			//miscellaneous variables
			var points = 0;
			var score;
			var isPaused = false;
			var enemyMultiplier = 1;
			
			function runGame(){
				gameArea.start();
				player = new rectangleModel(20, 20, "#1a53ff", (gameArea.canvas.width/2)-10, (gameArea.canvas.height/2)-10);
				score = new rectangleModel("20px", "Impact", "black", 850, 50, "text");
				life = new rectangleModel("20px", "Impact", "black", 850, 25, "text");
			}

			var gameArea = {
				canvas : document.createElement("canvas"),
				start : function(){
					this.canvas.width = 1024;
					this.canvas.height = 576;
					this.context = this.canvas.getContext("2d");
					document.body.insertBefore(this.canvas, document.body.childNodes[0]);
					this.frameNum = 0;
					this.interval = setInterval(frameRefresh, 1000/60);
					window.addEventListener("keydown", function(e){
						gameArea.keys = (gameArea.keys || []);
						gameArea.keys[e.keyCode] = true;
						if(e.keyCode==80){
							pauseCheck();
						}
					})
					window.addEventListener("keyup", function(e){
						gameArea.keys[e.keyCode] = false;
						if(e.keyCode==32){
							isShooting = false;
							shotFrame = 0;
							beamStage.splice(0);
							if(beamFull==true){
								shootBeam = true;
								beamFull = false;
							}
						}
					})
				},
				clear : function(){
					this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
				}
			}
			
			//pause the game
			function pauseCheck(){
				if(!isPaused){
					clearInterval(gameArea.interval);
					isPaused = true;
				}else{
					gameArea.interval = setInterval(frameRefresh, 1000/60);
					isPaused = false;
				}
			}
			
			function frameRefresh(){
				var x, y;
				score.text="Score: "+points;
				life.text="Lives: "+lives;
				gameArea.clear();
				gameArea.frameNum++;
				
				//player movement
				player.speedX = 0;
				player.speedY = 0;
				if(gameArea.keys && (gameArea.keys[37] || gameArea.keys[65])){
					player.speedX-=4.5;
					if(player.x<=1){
						player.speedX=0;
					}
				}
				if(gameArea.keys && (gameArea.keys[39] || gameArea.keys[68])){
					player.speedX+=4.5;
					if(player.x>=1003){
						player.speedX=0;
					}
				}
				if(gameArea.keys && (gameArea.keys[38] || gameArea.keys[87])){
					player.speedY-=4.5;	
					if(player.y<=2){
						player.speedY=0;
					}
				}
				if(gameArea.keys && (gameArea.keys[40] || gameArea.keys[83])){
					player.speedY+=4.5;
					if(player.y>=554){
						player.speedY=0;
					}
				}
				player.newPos();
				player.update();
				
				//player respawn
				if(invulnerability==true){
					if(player.frameNum>=0 && player.frameNum<60){
						player.frameNum++;
						player.color = "#B5C7FF";
					}else if(player.frameNum>=60 && player.frameNum<120){
						player.frameNum++;
						player.color = "#8DA9FF";
					}else if(player.frameNum>=120 && player.frameNum<180){
						player.frameNum++;
						player.color = "#7093FF";
					}else{
						player.frameNum = 0;
						player.color = "#1a53ff";
						invulnerability = false;
					}
				}
				
				//player shooting
				if(gameArea.keys && gameArea.keys[32] && invulnerability==false){
					isShooting = true;
					shotFrame++;
					if(gunType==1){
						if(isShooting && (shotFrame==1 || shotFrame%6==0)){
							x = player.x+player.width;
							y = player.y+8;
							playerBullets.push(new rectangleModel(60, 4, "#93FFF7", x, y));
						}
						beamFull = false;
						shootBeam = false;
					}else if(gunType==2){
						if(isShooting && (shotFrame==1 || shotFrame%4==0)){
							x = player.x+player.width;
							randomY = randomInt(0, 14);
							y = player.y+randomY;
							playerBullets.push(new rectangleModel(12, 6, "#A8A8A8", x, y));
						}
						beamFull = false;
						shootBeam = false;
					}else if(gunType==3){
						if(isShooting && (shotFrame==1 || shotFrame%20==0)){
							x = player.x+player.width;
							y = player.y-10;
							splitNum = 1;
							for(var i=0;i<5;i++){
								playerBullets.push(new rectangleModel(16, 8, "#F68A09", x, y));
								playerBullets[playerBullets.length-1].tag = splitNum;
								splitNum++;
								y+=8;
							}
						}
						beamFull = false;
						shootBeam = false;
					}else if(gunType==4){
						if(isShooting && (shotFrame==1 || shotFrame%20==0)){
							x = player.x+player.width;
							y = player.y+9;
							for(var i=0;i<8;i++){
								playerBullets.push(new rectangleModel(16, 2, "#CDCA28", x, y));
							}
						}
						beamFull = false;
						shootBeam = false;
					}else if(gunType==5){
						if(isShooting && (shotFrame==1 || shotFrame%32==0)){
							novaNum = 0;
						}
						if(novaNum<8){
							if(novaNum==0){
								playerBullets.push(new rectangleModel(14, 14, "#9174BF", player.x+player.width, player.y+3));
								playerBullets[playerBullets.length-1].tag = 6;
								novaDelay = gameArea.frameNum;
								novaNum++;
							}
							if(gameArea.frameNum==novaDelay+4){
								if(novaNum==1){
									playerBullets.push(new rectangleModel(14, 14, "#9174BF", player.x+player.width, player.y-14));
									playerBullets[playerBullets.length-1].tag = 7;
									novaDelay = gameArea.frameNum;
									novaNum++;
								}else if(novaNum==2){
									playerBullets.push(new rectangleModel(14, 14, "#9174BF", player.x+3, player.y-14));
									playerBullets[playerBullets.length-1].tag = 8;
									novaDelay = gameArea.frameNum;
									novaNum++;
								}else if(novaNum==3){
									playerBullets.push(new rectangleModel(14, 14, "#9174BF", player.x-14, player.y-14));
									playerBullets[playerBullets.length-1].tag = 9;
									novaDelay = gameArea.frameNum;
									novaNum++;
								}else if(novaNum==4){
									playerBullets.push(new rectangleModel(14, 14, "#9174BF", player.x-14, player.y+3));
									playerBullets[playerBullets.length-1].tag = 10;
									novaDelay = gameArea.frameNum;
									novaNum++;
								}else if(novaNum==5){
									playerBullets.push(new rectangleModel(14, 14, "#9174BF", player.x-14, player.y+player.height));
									playerBullets[playerBullets.length-1].tag = 11;
									novaDelay = gameArea.frameNum;
									novaNum++;
								}else if(novaNum==6){
									playerBullets.push(new rectangleModel(14, 14, "#9174BF", player.x+3, player.y+player.height));
									playerBullets[playerBullets.length-1].tag = 12;
									novaDelay = gameArea.frameNum;
									novaNum++;
								}else if(novaNum==7){
									playerBullets.push(new rectangleModel(14, 14, "#9174BF", player.x+player.width, player.y+player.height));
									playerBullets[playerBullets.length-1].tag = 13;
									novaNum++;
								}
							}
						}
						beamFull = false;
						shootBeam = false;
					}else if(gunType==6){
						if(isShooting && (shotFrame==1 || shotFrame%12==0)){
							x = (player.x+player.width)-38;
							y = player.y+(player.width/2);
							playerBullets.push(new circleModel(x, y, 54, (7*Math.PI)/4, Math.PI/4, "#4C80EE", "melee"));
						}
						beamFull = false;
						shootBeam = false;
					}else if(gunType==7){
						if(isShooting && shotFrame==1){
							x = player.x+player.width;
							y = player.y+9;
							beamStage.push(new rectangleModel(1024, 2, "#10FFA8", x, y));
							beamStage[beamStage.length-1].tag = 0;
						}
					}else{
						if(isShooting && (shotFrame==1 || shotFrame%15==0)){
							x = player.x+player.width;
							y = player.y+6;
							playerBullets.push(new rectangleModel(16, 8, "#009900", x, y));
						}
					}
				}
				
				//special shooting for beam
				if(shootBeam==true){
					x = player.x+player.width;
					y = player.y-6;
					playerBullets.push(new rectangleModel(1024, 32, "#00E591", x, y));
					playerBullets[playerBullets.length-1].tag = 14;
					shootBeamDelay = gameArea.frameNum;
					shootBeam = false;
				}
			
				//bullet movement
				for(var i=0;i<playerBullets.length;i++){
					if(gunType==1){
						playerBullets[i].x+=10;
					}else if(gunType==2){
						if(playerBullets[i].hasSpread==false){
							sign = randomInt(0, 1);
							if(sign==0){
								playerBullets[i].spread = -1*Math.random();
							}else{
								playerBullets[i].spread = Math.random();
							}
							playerBullets[i].hasSpread = true;
						}
						playerBullets[i].x+=6;
						playerBullets[i].y+=playerBullets[i].spread;
					}else if(gunType==3){
						playerBullets[i].x+=7;
						if(playerBullets[i].tag==1){
							playerBullets[i].y-=2;
						}
						if(playerBullets[i].tag==2){
							playerBullets[i].y-=1;
						}
						if(playerBullets[i].tag==4){
							playerBullets[i].y+=1;
						}
						if(playerBullets[i].tag==5){
							playerBullets[i].y+=2;
						}
					}else if(gunType==4){
						if(playerBullets[i].hasSpread==false){
							sign = randomInt(0, 1);
							if(sign==0){
								playerBullets[i].spread = -1*randomFloat(0, 3.5);
							}else{
								playerBullets[i].spread = randomFloat(0, 3.5);
							}
							playerBullets[i].hasSpread = true;
						}
						playerBullets[i].x+=30;
						playerBullets[i].y+=playerBullets[i].spread;
					}else if(gunType==5){
						if(playerBullets[i].tag==6){
							playerBullets[i].x+=5;
						}else if(playerBullets[i].tag==7){
							playerBullets[i].x+=5;
							playerBullets[i].y-=5;
						}else if(playerBullets[i].tag==8){
							playerBullets[i].y-=5;
						}else if(playerBullets[i].tag==9){
							playerBullets[i].x-=5;
							playerBullets[i].y-=5;
						}else if(playerBullets[i].tag==10){
							playerBullets[i].x-=5;
						}else if(playerBullets[i].tag==11){
							playerBullets[i].x-=5;
							playerBullets[i].y+=5;
						}else if(playerBullets[i].tag==12){
							playerBullets[i].y+=5;
						}else if(playerBullets[i].tag==13){
							playerBullets[i].x+=5;
							playerBullets[i].y+=5;
						}else if(playerBullets[i].tag!=6 && 
								 playerBullets[i].tag!=7 && 
								 playerBullets[i].tag!=8 && 
								 playerBullets[i].tag!=9 && 
								 playerBullets[i].tag!=10 && 
								 playerBullets[i].tag!=11 && 
								 playerBullets[i].tag!=12){
							playerBullets[i].x+=6;
						}
					}else if(gunType==6){
						playerBullets[i].frameNum++;
						if(playerBullets[i].frameNum==20){
							playerBullets[i].x = -2000;
						}
						playerBullets[i].x+=20;
					}else if(gunType==7){
						if(playerBullets[i].tag==14){
							playerBullets[i].x = player.x+player.width;
							playerBullets[i].y = player.y-6;
							if(gameArea.frameNum%10==0){
								playerBullets[i].color = "#DEFF0F";
							}else{
								playerBullets[i].color = "#00E591";
							}
							if(gameArea.frameNum==shootBeamDelay+60){
								playerBullets.splice(i, 1);
							}
						}else{
							playerBullets[i].x+=6;
						}
					}else{
						playerBullets[i].x+=5;
					}
					playerBullets[i].update();
				}
				bulletOut();
				
				//special movement for beam charge up
				for(var i=0;i<beamStage.length;i++){
					if(beamStage[i].tag==0){
						beamDelay = gameArea.frameNum;
						beamCharge = 9;
						beamStage[i].tag++;
					}
					if(gameArea.frameNum==beamDelay+3){
						beamStage[i].tag++;
						beamCharge--;
						beamStage[i].height+=2;
						beamDelay = gameArea.frameNum;
					}
					if(beamStage[i].tag>=16){
						if(shotFrame%20==0){
							beamStage[i].color = "#DEFF0F";
						}else{
							beamStage[i].color = "#10FFA8";
						}
						beamStage[i].height = 32;
						beamCharge = -6;
						beamFull = true;
					}
					beamStage[i].y = player.y+beamCharge;
					beamStage[i].x = player.x+player.width;
					beamStage[i].update();
				}
				
				//enemy health multiplier
				if(gameArea.frameNum>18000 && frameInterval(9000)){
					enemyMultiplier+=0.5;
				}
				
				//basic spawning and movement
				if(gameArea.frameNum==1 || frameInterval(60)){	
					x = gameArea.canvas.width;
					y = randomInt(0, 556);
					basicEnemies.push(new rectangleModel(20, 20, "#ff0000", x, y));
				}
				for(var i=0;i<basicEnemies.length;i++){
					basicEnemies[i].x-=3;
					basicEnemies[i].update();
					basicEnemies[i].frameNum++;
				}
				
				//basic shooting
				for(var i=0;i<basicEnemies.length;i++){
					if(basicEnemies[i].frameNum%90==0){
						x = basicEnemies[i].x-10;
						y = basicEnemies[i].y+6;
						basicBullets.push(new rectangleModel(16, 8, "#ff00ff", x, y));
					}
				}
				for(var i=0;i<basicBullets.length;i++){
					basicBullets[i].x-=4;
					basicBullets[i].update();
				}
				basicOut();
				basicBulletOut();
				basicBulletCollision();
				playerBasicBulletCollision();
				playerBasicCollision();
				beamBasicBulletCollision();
				
				//charger spawning and movement
				if(gameArea.frameNum>=1800){
					if(frameInterval(270)){
						x = gameArea.canvas.width;
						y = randomInt(0, 551);
						chargerEnemies.push(new rectangleModel(40, 25, "#00b3b3", x, y));
					}
				}
				for(var i=0;i<chargerEnemies.length;i++){
					if(chargerEnemies[i].frameNum<20){
						chargerEnemies[i].x-=5;
						chargerEnemies[i].update();
					}else if(chargerEnemies[i].frameNum>=20 && chargerEnemies[i].frameNum<50){
						chargerEnemies[i].x++;
						chargerEnemies[i].update();
					}else{
						chargerEnemies[i].x-=50;
						chargerEnemies[i].update();
					}
					chargerEnemies[i].frameNum++;
				}
				chargerOut();
				chargerBulletCollision();
				playerChargerCollision();
				
				//lateral spawning and movement
				if(gameArea.frameNum>=3600){
					if(frameInterval(240)){
						x = gameArea.canvas.width;
						y = randomInt(0, 551);
						lateralEnemies.push(new rectangleModel(25, 25, "#006600", x, y));
					}
				}
				for(var i=0;i<lateralEnemies.length;i++){
					lateralEnemies[i].x-=4;
					lateralEnemies[i].update();
					lateralEnemies[i].frameNum++;
				}
				
				//lateral shooting
				for(var i=0;i<lateralEnemies.length;i++){
					if(lateralEnemies[i].frameNum%60==0){
						x = lateralEnemies[i].x+7;
						y1 = lateralEnemies[i].y-22;
						y2 = lateralEnemies[i].y+25;
						lateralTopBullets.push(new rectangleModel(11, 22, "#2DC173", x, y1));
						lateralBottomBullets.push(new rectangleModel(11, 22, "#2DC173", x, y2));
					}
				}
				for(var i=0;i<lateralTopBullets.length;i++){
					lateralTopBullets[i].y-=4;
					lateralTopBullets[i].update();
				}
				for(var i=0;i<lateralBottomBullets.length;i++){
					lateralBottomBullets[i].y+=4;
					lateralBottomBullets[i].update();
				}
				lateralOut();
				lateralTopBulletOut();
				lateralBottomBulletOut();
				lateralBulletCollision();
				playerLateralTopBulletCollision();
				playerLateralBottomBulletCollision();
				playerLateralCollision();
				beamLateralTopBulletCollision();
				beamLateralBottomBulletCollision();
				
				//bouncer spawning and movement
				if(gameArea.frameNum>=5400){
					if(frameInterval(300)){
						x = randomInt(0, 994);
						y = gameArea.canvas.height;
						bouncerEnemies.push(new rectangleModel(30, 50, "#CFD37B", x, y));
					}
				}
				for(var i=0;i<bouncerEnemies.length;i++){
					x = bouncerEnemies[i].frameNum;
					speed = (-1/2050)*(x+120)*(x-120);
					bouncerEnemies[i].y-=speed;
					bouncerEnemies[i].update();
					bouncerEnemies[i].frameNum++;
				}
				bouncerOut();
				bouncerBulletCollision();
				playerBouncerCollision();
				
				//snake spawning and movement
				if(gameArea.frameNum>=7200){
					x = gameArea.canvas.width;
					spawnpoint = randomInt(0, 506);
					if(frameInterval(360)){
						snakeY = spawnpoint;
						snakeEnemies.push(new rectangleModel(20, 20, "#D10F0F", x, snakeY));
						snakeDelay = gameArea.frameNum;
						snakeCount = 0;
					}else{
						if(snakeCount<14){
							if(gameArea.frameNum==snakeDelay+5){
								snakeEnemies.push(new rectangleModel(20, 20, "#29AF35", x, snakeY));
								snakeDelay = gameArea.frameNum;
								snakeCount++;
							}
						}
					}
				}
				for(var i=0;i<snakeEnemies.length;i++){
					snakeEnemies[i].frameNum++;
					if(snakeEnemies[i].frameNum%10==0){
						snakeEnemies[i].snakeCycle++;
						if(snakeEnemies[i].snakeCycle==4){
							snakeEnemies[i].snakeCycle = 0;
						}
					}
					if(snakeEnemies[i].frameNum%5==0){
						if(snakeEnemies[i].snakeCycle==0){
							snakeEnemies[i].x-=25;
						}else if(snakeEnemies[i].snakeCycle==1){
							snakeEnemies[i].y+=25;
						}else if(snakeEnemies[i].snakeCycle==2){
							snakeEnemies[i].x-=25;
						}else if(snakeEnemies[i].snakeCycle==3){
							snakeEnemies[i].y-=25;
						}
					}
					snakeEnemies[i].update();
				}
				snakeOut();
				snakeBulletCollision();
				playerSnakeCollision();
				
				//blob spawning and movement
				if(gameArea.frameNum>=9000){
					if(frameInterval(240)){
						x = gameArea.canvas.width;
						y = randomInt(0, 544);
						blob1Enemies.push(new rectangleModel(40, 40, "#A6E1A1", x, y));
					}
				}
				for(var i=0;i<blob1Enemies.length;i++){
					blob1Enemies[i].x-=2;
					blob1Enemies[i].update();
					blob1Enemies[i].frameNum++;
				}
				for(var i=0;i<blobTop2Enemies.length;i++){
					blobTop2Enemies[i].frameNum++;
					if(blobTop2Enemies[i].frameNum<11){
						blobTop2Enemies[i].y-=5;
						blobTop2Enemies[i].x-=2;
					}else{
						blobTop2Enemies[i].x-=4;
					}
					blobTop2Enemies[i].update();
				}
				for(var i=0;i<blobBottom2Enemies.length;i++){
					blobBottom2Enemies[i].frameNum++;
					if(blobBottom2Enemies[i].frameNum<11){
						blobBottom2Enemies[i].y+=5;
						blobBottom2Enemies[i].x-=2;
					}else{
						blobBottom2Enemies[i].x-=4;
					}
					blobBottom2Enemies[i].update();
				}
				for(var i=0;i<blobTop3Enemies.length;i++){
					blobTop3Enemies[i].frameNum++;
					if(blobTop3Enemies[i].frameNum<11){
						blobTop3Enemies[i].y-=3;
						blobTop3Enemies[i].x-=4;
					}else{
						blobTop3Enemies[i].x-=8;
					}
					blobTop3Enemies[i].update();
				}
				for(var i=0;i<blobBottom3Enemies.length;i++){
					blobBottom3Enemies[i].frameNum++;
					if(blobBottom3Enemies[i].frameNum<11){
						blobBottom3Enemies[i].y+=3;
						blobBottom3Enemies[i].x-=4;
					}else{
						blobBottom3Enemies[i].x-=8;
					}
					blobBottom3Enemies[i].update();
				}
				blobOut();
				blobBulletCollision();
				playerBlobCollision();
				
				//kamikaze spawning and movement
				if(gameArea.frameNum>=10800){
					if(frameInterval(900)){
						x = gameArea.canvas.width;
						y = randomInt(0, 556);
						kamikazeEnemies.push(new rectangleModel(18, 18, "#FFBAAD", x, y));
					}
				}
				for(var i=0;i<kamikazeEnemies.length;i++){
					kamikazeEnemies[i].frameNum++;
					distX = ((player.x+(player.width/2))-(kamikazeEnemies[i].x+(kamikazeEnemies[i].width/2)))/75;
					distY = ((player.y+(player.height/2))-(kamikazeEnemies[i].y+(kamikazeEnemies[i].height/2)))/75;
					kamikazeEnemies[i].x+=distX;
					kamikazeEnemies[i].y+=distY;
					if(kamikazeEnemies[i].frameNum>=60 && kamikazeEnemies[i].frameNum<120){
						kamikazeEnemies[i].color = "#FF9480";
					}else if(kamikazeEnemies[i].frameNum>=120 && kamikazeEnemies[i].frameNum<180){
						kamikazeEnemies[i].color = "#FF6346";
					}else if(kamikazeEnemies[i].frameNum>=180){
						kamikazeEnemies[i].color = "#E63818";
					}
					kamikazeEnemies[i].update();
				}
				
				//kamikaze explosion
				for(var i=0;i<kamikazeEnemies.length;i++){
					if(kamikazeEnemies[i].frameNum==240){
						x = kamikazeEnemies[i].x+(kamikazeEnemies[i].width/2);
						y = kamikazeEnemies[i].y+(kamikazeEnemies[i].height/2);
						kamikazeEnemies.splice(i, 1);
						kamikazeExplosion.push(new circleModel(x, y, 9, 0, 2*Math.PI, "#A5A5A5"));
					}
				}
				for(var i=0;i<kamikazeExplosion.length;i++){
					kamikazeExplosion[i].frameNum++;
					if(kamikazeExplosion[i].frameNum==1){
						kamikazeExplosion[i].color = "#FFBCAF";
						explodeDelay = kamikazeExplosion[i].frameNum;
					}else if(kamikazeExplosion[i].frameNum>10){
						kamikazeExplosion.splice(i, 1);
					}else if(kamikazeExplosion[i].frameNum==explodeDelay+1){
						if(kamikazeExplosion[i].frameNum==3){
							kamikazeExplosion[i].color = "#FFC4B9";
						}else if(kamikazeExplosion[i].frameNum==5){
							kamikazeExplosion[i].color = "#FFCDC4";
						}else if(kamikazeExplosion[i].frameNum==7){
							kamikazeExplosion[i].color = "#FFD4CD";
						}else if(kamikazeExplosion[i].frameNum==9){
							kamikazeExplosion[i].color = "#FFDED8";
						}
						kamikazeExplosion[i].r+=12;
						explodeDelay = kamikazeExplosion[i].frameNum;
					}
					kamikazeExplosion[i].update();
				}
				kamikazeBulletCollision();
				playerKamikazeCollision();
				playerKamikazeExplosionCollision();
				
				//dash spawning and movement
				if(gameArea.frameNum>=12600){
					if(frameInterval(480)){
						x = gameArea.canvas.width;
						y = randomInt(0, 546);
						dashEnemies.push(new rectangleModel(30, 30, "#6617D8", x, y));
					}
				}
				for(var i=0;i<dashEnemies.length;i++){
					dashEnemies[i].frameNum++;
					if(dashEnemies[i].frameNum==1 || dashEnemies[i].frameNum%30==0){
						dashEnemies[i].dash = true;
					}
					if(dashEnemies[i].dash==true){
						dashDelay = gameArea.frameNum;
						dashX = randomFloat(-10, -5);
						dashY = randomFloat(-15, 15);
						dashEnemies[i].dash = false;
					}
					if(gameArea.frameNum<=dashDelay+15){
						dashEnemies[i].x+=dashX;
						dashEnemies[i].y+=dashY;
						if(dashEnemies[i].y<0){
							dashEnemies[i].y = 0;
						}
						if(dashEnemies[i].y+30>576){
							dashEnemies[i].y = 546;
						}
					}
					dashEnemies[i].update();
				}
				dashOut();
				dashBulletCollision();
				playerDashCollision();
				
				//flamethrower spawning and movement
				if(gameArea.frameNum>=14400){
					if(frameInterval(540)){
						x = gameArea.canvas.width;
						y = randomInt(0, 551);
						flamethrowerEnemies.push(new rectangleModel(25, 25, "#E26E1E", x, y));
					}
				}
				for(var i=0;i<flamethrowerEnemies.length;i++){
					flamethrowerEnemies[i].x-=2.5;
					flamethrowerEnemies[i].update();
					flamethrowerEnemies[i].frameNum++;
				}
				
				//flamethrower shooting
				for(var i=0;i<flamethrowerEnemies.length;i++){
					if(flamethrowerEnemies[i].frameNum%1==0){
						x = flamethrowerEnemies[i].x;
						y = flamethrowerEnemies[i].y+12.5;
						flamethrowerBullets.push(new circleModel(x, y, 5, 0, 2*Math.PI, "#FFFFFF"));
					}
				}
				for(var i=0;i<flamethrowerBullets.length;i++){
					flamethrowerBullets[i].frameNum++;
					if(flamethrowerBullets[i].hasSpread==false){
						flamethrowerBullets[i].spread = randomFloat(-0.5, 0.5);
						flamethrowerBullets[i].hasSpread = true;
					}
					if(flamethrowerBullets[i].frameNum>=5 && flamethrowerBullets[i].frameNum<10){
						flamethrowerBullets[i].color = "#FCCEBC";
					}else if(flamethrowerBullets[i].frameNum>=10 && flamethrowerBullets[i].frameNum<15){
						flamethrowerBullets[i].color = "#E3C84F";
					}else if(flamethrowerBullets[i].frameNum>=15 && flamethrowerBullets[i].frameNum<20){
						flamethrowerBullets[i].color = "#D68B18";
					}else if(flamethrowerBullets[i].frameNum>=20 && flamethrowerBullets[i].frameNum<25){
						flamethrowerBullets[i].color = "#E4750D";
					}else if(flamethrowerBullets[i].frameNum>=25){
						flamethrowerBullets[i].color = "#C44410";
					}
					if(flamethrowerBullets[i].frameNum>randomInt(60, 120)){
						flamethrowerBullets.splice(i, 1);
					}
					flamethrowerBullets[i].y+=flamethrowerBullets[i].spread;
					flamethrowerBullets[i].x-=4;
					flamethrowerBullets[i].update();
				}
				flamethrowerOut();
				flamethrowerBulletCollision();
				playerFlamethrowerBulletCollision();
				playerFlamethrowerCollision();
				
				//barrier spawning and movement
				if(gameArea.frameNum>=16200){
					if(frameInterval(1020)){
						x = gameArea.canvas.width;
						y = randomInt(88, 413);
						barrierEnemies.push(new rectangleModel(20, 30, "#B024D6", x, y));
						lazerX = barrierEnemies[barrierEnemies.length-1].x+1;
						lazerSide = randomInt(1, 2);
						if(lazerSide==1){
							lazerY = barrierEnemies[barrierEnemies.length-1].y-576;
						}else{
							lazerY = barrierEnemies[barrierEnemies.length-1].y+30;
						}
						barrierLazer.push(new rectangleModel(18, 576, "#DA1CE3", lazerX, lazerY));
					}
				}
				for(var i=0;i<barrierEnemies.length;i++){
					barrierEnemies[i].x-=1.5;
					barrierEnemies[i].update();
					barrierEnemies[i].frameNum++;
				}
				
				for(var i=0;i<barrierLazer.length;i++){
					barrierLazer[i].frameNum++;
					if(barrierLazer[i].frameNum%10==0){
						barrierLazer[i].color = "#DA1CE3";
					}else if(barrierLazer[i].frameNum%5==0){
						barrierLazer[i].color = "#F74CFF";
					}
					barrierLazer[i].x-=1.5;
					barrierLazer[i].update();
				}
				barrierOut();
				barrierBulletCollision();
				playerBarrierLazerCollision();
				playerBarrierCollision();
				
				//entity spawning and movement
				if(frameInterval(18000)){	
					entity.push(new rectangleModel(100, 100, "#7E037A", gameArea.canvas.width, 238));
					entity[entity.length-1].tag = 15;
					entityDelay = gameArea.frameNum;
					entityCount = 0;
					entityTag = 16;
				}
				if(entityCount<14){
					if(gameArea.frameNum==entityDelay+20){
						for(var i=0;i<entity.length;i++){
							if(entity[i].tag==15){
								entityCorner = entity[i].x+125;
							}
						}
						if(entityCount==0){
							entityColor = "#E8E8E8";
						}else if(entityCount==1){
							entityColor = "#93FFF7";
						}else if(entityCount==2){
							entityColor = "#E8E8E8";
						}else if(entityCount==3){
							entityColor = "#A8A8A8";
						}else if(entityCount==4){
							entityColor = "#E8E8E8";
						}else if(entityCount==5){
							entityColor = "#F68A09";
						}else if(entityCount==6){
							entityColor = "#E8E8E8";
						}else if(entityCount==7){
							entityColor = "#CDCA28";
						}else if(entityCount==8){
							entityColor = "#E8E8E8";
						}else if(entityCount==9){
							entityColor = "#9174BF";
						}else if(entityCount==10){
							entityColor = "#E8E8E8";
						}else if(entityCount==11){
							entityColor = "#4C80EE";
						}else if(entityCount==12){
							entityColor = "#E8E8E8";
						}else if(entityCount==13){
							entityColor = "#00E591";
						}
						entity.push(new rectangleModel(25, 25, entityColor, entityCorner, 188));
						entity[entity.length-1].tag = entityTag;
						entityDelay = gameArea.frameNum;
						entityCount++;
						entityTag++;
					}
				}
				for(var i=0;i<entity.length;i++){
					entity[i].frameNum++;
					if(entity[i].tag==15){
						entity[i].x-=0.25;
					}
					if(entity[i].tag>15){
						if(entity[i].frameNum<=70){
							entity[i].x-=2.75;
							entity[i].entityShooting = false;
						}
						if(entity[i].frameNum>70 && entity[i].frameNum<=140){
							entity[i].x-=0.25;
							entity[i].y+=2.5;
							entity[i].entityShooting = true;
						}
						if(entity[i].frameNum>140 && entity[i].frameNum<=210){
							entity[i].x+=2.25;
							entity[i].entityShooting = false;
						}
						if(entity[i].frameNum>210 && entity[i].frameNum<=280){
							entity[i].x-=0.25;
							entity[i].y-=2.5;
							entity[i].entityShooting = false;
						}
						if(entity[i].frameNum>280){
							entity[i].x-=0.25;
							entity[i].frameNum = 0;
							entity[i].entityShooting = false;
						}
					}
					entity[i].update();
				}
				
				//entity shooting
				for(var i=0;i<entity.length;i++){
					if(entity[i].entityShooting==true){
						if(entity[i].tag==17){
							if(entity[i].frameNum==71 || entity[i].frameNum%17.5==0){
								x = entity[i].x-21;
								y = entity[i].y+10.5;
								entityBullets.push(new rectangleModel(21, 4, "#93FFF7", x, y));
								entityBullets[entityBullets.length-1].tag = 30;
							}
						}
						if(entity[i].tag==19){
							if(entity[i].frameNum>=75 && entity[i].frameNum<=135 && entity[i].frameNum%15==0){
								x = entity[i].x+12;
								randomY = randomInt(0, 19);
								y = entity[i].y+randomY;
								entityBullets.push(new rectangleModel(12, 6, "#A8A8A8", x, y));
								entityBullets[entityBullets.length-1].tag = 31;
							}
						}
						if(entity[i].tag==21){
							if(entity[i].frameNum==105){
								x = entity[i].x-16;
								y = entity[i].y;
								splitNum = 32;
								for(var k=0;k<5;k++){
									entityBullets.push(new rectangleModel(16, 5, "#F68A09", x, y));
									entityBullets[entityBullets.length-1].tag = splitNum;
									if(k==2){
										entityBullets.splice(entityBullets.length-1, 1);
									}
									splitNum++;
									y+=5;
								}
							}
						}
						if(entity[i].tag==23){
							if(entity[i].frameNum==88 || entity[i].frameNum==123){
								x = entity[i].x;
								y = entity[i].y+11.5;
								for(var k=0;k<4;k++){
									entityBullets.push(new rectangleModel(16, 2, "#CDCA28", x, y));
									entityBullets[entityBullets.length-1].tag = 37;
								}
							}
						}
						if(entity[i].tag==25){
							if(entity[i].frameNum==71){
								entityNova = 38;
							}
							if(entity[i].frameNum%13==0){
								entityBullets.push(new rectangleModel(13, 13, "#9174BF", entity[i].x-13, entity[i].y+6));
								entityBullets[entityBullets.length-1].tag = entityNova;
								entityNova++;
							}
						}
						if(entity[i].tag==27){
							if(entity[i].frameNum==71 || entity[i].frameNum%17.5==0){
								x = entity[i].x+38;
								y = entity[i].y+(entity[i].width/2);
								entityBullets.push(new circleModel(x, y, 54, (3*Math.PI)/4, (5*Math.PI)/4, "#4C80EE"));
								entityBullets[entityBullets.length-1].tag = 43;
							}
						}
						if(entity[i].tag==29){
							if(entity[i].frameNum==71 || entity[i].frameNum==136){
								x = entity[i].x-1024;
								y = entity[i].y+1;
								entityBullets.push(new rectangleModel(1024, 23, "#00E591", x, y));
								entityBullets[entityBullets.length-1].tag = 44;
							}
						}
					}
				}
				
				for(var i=entityBullets.length-1;i>=0;i--){
					if(entityBullets[i].tag==30){
						entityBullets[i].x-=4;
					}
					if(entityBullets[i].tag==31){
						if(entityBullets[i].hasSpread==false){
							entityBullets[i].spread = randomFloat(-0.25, 0.25);
							entityBullets[i].hasSpread = true;
						}
						entityBullets[i].x-=3;
						entityBullets[i].y+=entityBullets[i].spread;
					}
					if(entityBullets[i].tag>=32 && entityBullets[i].tag<=36){
						entityBullets[i].x-=4;
						if(entityBullets[i].tag==32){
							entityBullets[i].y-=2;
						}
						if(entityBullets[i].tag==33){
							entityBullets[i].y-=1;
						}
						if(entityBullets[i].tag==35){
							entityBullets[i].y+=1;
						}
						if(entityBullets[i].tag==36){
							entityBullets[i].y+=2;
						}
					}
					if(entityBullets[i].tag==37){
						if(entityBullets[i].hasSpread==false){
							entityBullets[i].spread = randomFloat(-3, 3);
							entityBullets[i].hasSpread = true;
						}
						entityBullets[i].x-=3;
						entityBullets[i].y+=entityBullets[i].spread;
					}
					if(entityBullets[i].tag>=38 && entityBullets[i].tag<=42){
						if(entityBullets[i].tag==38){
							entityBullets[i].x-=3;
							entityBullets[i].y-=1.5;
						}
						if(entityBullets[i].tag==39){
							entityBullets[i].x-=3.5;
							entityBullets[i].y-=1;
						}
						if(entityBullets[i].tag==40){
							entityBullets[i].x-=4;
						}
						if(entityBullets[i].tag==41){
							entityBullets[i].x-=4.5;
							entityBullets[i].y+=1;
						}
						if(entityBullets[i].tag==42){
							entityBullets[i].x-=5;
							entityBullets[i].y+=1.5;
						}
					}
					if(entityBullets[i].tag==43){
						entityBullets[i].frameNum++;
						if(entityBullets[i].frameNum==10){
							entityBullets[i].x = -100;
						}
						entityBullets[i].x-=20;
					}
					if(entityBullets[i].tag==44){
						for(var k=0;k<entity.length;k++){
							if(entity[k].tag==29){
								entityBullets[i].x = entity[k].x-1024;
								entityBullets[i].y = entity[k].y+1;
								if(gameArea.frameNum%10==0){
									entityBullets[i].color = "#DEFF0F";
								}else{
									entityBullets[i].color = "#00E591";
								}
								if(entity[k].frameNum==75 || entity[k].frameNum==140){
									entityBullets.splice(i, 1);
								}
							}
						}
					}
					entityBullets[i].update();
				}
				entityOut();
				entityBulletOut();
				entityBulletCollision();
				playerEntityBulletCollision();
				playerEntityCollision();
				beamEntityBulletCollision();
				
				//pick-up spawning and movement
				if(gameArea.frameNum%3600==0){
					weaponSpawn = randomInt(1,7);
					x = gameArea.canvas.width+9;
					y = randomInt(9, 557);
					if(weaponSpawn==1){
						pickUps.push(new circleModel(x, y, 9, 0, 2*Math.PI, "#93FFF7", "lazer"));
					}
					if(weaponSpawn==2){
						pickUps.push(new circleModel(x, y, 9, 0, 2*Math.PI, "#A8A8A8", "machine gun"));
					}
					if(weaponSpawn==3){
						pickUps.push(new circleModel(x, y, 9, 0, 2*Math.PI, "#F68A09", "split"));
					}
					if(weaponSpawn==4){
						pickUps.push(new circleModel(x, y, 9, 0, 2*Math.PI, "#CDCA28", "shotgun"));
					}
					if(weaponSpawn==5){
						pickUps.push(new circleModel(x, y, 9, 0, 2*Math.PI, "#9174BF", "nova"));
					}
					if(weaponSpawn==6){
						pickUps.push(new circleModel(x, y, 9, 0, 2*Math.PI, "#4C80EE", "melee"));
					}
					if(weaponSpawn==7){
						pickUps.push(new circleModel(x, y, 9, 0, 2*Math.PI, "#00E591", "beam"));
					}
				}
				for(var i=0;i<pickUps.length;i++){
					pickUps[i].x-=2;
					pickUps[i].frameNum++;
					if(pickUps[i].type!=null){
						if(pickUps[i].frameNum%20==0){
							pickUps[i].color = "#DEFF0F";
						}else{
							if(pickUps[i].type=="lazer"){
								pickUps[i].color = "#93FFF7";
							}
							if(pickUps[i].type=="machine gun"){
								pickUps[i].color = "#A8A8A8";
							}
							if(pickUps[i].type=="split"){
								pickUps[i].color = "#F68A09";
							}
							if(pickUps[i].type=="shotgun"){
								pickUps[i].color = "#CDCA28";
							}
							if(pickUps[i].type=="nova"){
								pickUps[i].color = "#9174BF";
							}
							if(pickUps[i].type=="melee"){
								pickUps[i].color = "#4C80EE";
							}
							if(pickUps[i].type=="beam"){
								pickUps[i].color = "#00E591";
							}
						}
					}
					pickUps[i].update();
				}
				getPickUp();
				pickUpOut();
				
				score.update();
				life.update();
			}
			
			function death(){
				player.health--;
				lives--;
				if(player.health<=-3){
					player.x=-1000000;
					player.y=-1000000;
					lives = 0;
				}else{
					player.x = (gameArea.canvas.width/2)-10;
					player.y = (gameArea.canvas.height/2)-10;
					invulnerability = true;
				}
			}
			
			function bulletOut(){
				for(var i=0;i<playerBullets.length;i++){
					if(playerBullets[i].x>1024 || playerBullets[i].x<-50 || playerBullets[i].y>576 || playerBullets[i].y<-50){
						playerBullets.splice(i, 1);
					}
				}
			}
			
			//enemy functions
			function basicOut(){
				for(var i=0;i<basicEnemies.length;i++){
					if(basicEnemies[i].x+20<0){
						basicEnemies.splice(i, 1);
					}
				}
			}
			
			function basicBulletOut(){
				for(var i=0;i<basicBullets.length;i++){
					if(basicBullets[i].x+16<0){
						basicBullets.splice(i, 1);
					}
				}
			}
			
			function basicBulletCollision(){
				for(var i=playerBullets.length-1;i>=0;i--){
					for(var k=basicEnemies.length-1;k>=0;k--){
						if((rectRectCollision(playerBullets[i], basicEnemies[k]) || rectCircCollision(basicEnemies[k], playerBullets[i]))&& invulnerability==false){
							basicEnemies[k].health-=bulletDamage;
							if(basicEnemies[k].health<=-1*enemyMultiplier){
								basicEnemies.splice(k, 1);
								points+=10*enemyMultiplier;
							}
							if(playerBullets[i].tag!=14 && playerBullets[i].type!="melee"){
								playerBullets.splice(i, 1);
							}
						}
					}
				}
			}
			
			function playerBasicBulletCollision(){
				for(var i=0;i<basicBullets.length;i++){
					if(rectRectCollision(player, basicBullets[i])&& invulnerability==false){
						basicBullets.splice(i, 1);
						death();
					}
				}
			}
			
			function playerBasicCollision(){
				for(var i=0;i<basicEnemies.length;i++){
					if(rectRectCollision(player, basicEnemies[i])&& invulnerability==false){
						death();
					}
				}
			}
			
			function beamBasicBulletCollision(){
				for(var i=playerBullets.length-1;i>=0;i--){
					if(playerBullets[i].tag==14){
						for(var k=basicBullets.length-1;k>=0;k--){
							if(rectRectCollision(playerBullets[i], basicBullets[k])&& invulnerability==false){
								basicBullets.splice(k, 1);
							}
						}
					}
				}
			}
			
			function chargerOut(){
				for(var i=0;i<chargerEnemies.length;i++){
					if(chargerEnemies[i].x+40<0){
						chargerEnemies.splice(i, 1);
					}
				}
			}
			
			function chargerBulletCollision(){
				for(var i=playerBullets.length-1;i>=0;i--){
					for(var k=chargerEnemies.length-1;k>=0;k--){
						if((rectRectCollision(playerBullets[i], chargerEnemies[k]) || rectCircCollision(chargerEnemies[k], playerBullets[i]))&& invulnerability==false){
							chargerEnemies[k].health-=bulletDamage;
							if(chargerEnemies[k].health<=-1*enemyMultiplier){
								chargerEnemies.splice(k, 1);
								points+=10*enemyMultiplier;
							}
							if(playerBullets[i].tag!=14 && playerBullets[i].type!="melee"){
								playerBullets.splice(i, 1);
							}
						}
					}
				}
			}
			
			function playerChargerCollision(){
				for(var i=0;i<chargerEnemies.length;i++){
					if(rectRectCollision(player, chargerEnemies[i])&& invulnerability==false){
						death();
					}
				}
			}
			
			function lateralOut(){
				for(var i=0;i<lateralEnemies.length;i++){
					if(lateralEnemies[i].x+25<0){
						lateralEnemies.splice(i, 1);
					}
				}
			}
			
			function lateralTopBulletOut(){
				for(var i=0;i<lateralTopBullets.length;i++){
					if(lateralTopBullets[i].y+22<0){
						lateralTopBullets.splice(i, 1);
					}
				}
			}
			
			function lateralBottomBulletOut(){
				for(var i=0;i<lateralBottomBullets.length;i++){
					if(lateralBottomBullets[i].y>576){
						lateralBottomBullets.splice(i, 1);
					}
				}
			}
			
			function lateralBulletCollision(){
				for(var i=playerBullets.length-1;i>=0;i--){
					for(var k=lateralEnemies.length-1;k>=0;k--){
						if((rectRectCollision(playerBullets[i], lateralEnemies[k]) || rectCircCollision(lateralEnemies[k], playerBullets[i]))&& invulnerability==false){
							lateralEnemies[k].health-=bulletDamage;
							if(lateralEnemies[k].health<=-3*enemyMultiplier){
								lateralEnemies.splice(k, 1);
								points+=30*enemyMultiplier;
							}
							if(playerBullets[i].tag!=14 && playerBullets[i].type!="melee"){
								playerBullets.splice(i, 1);
							}
						}
					}
				}
			}
			
			function playerLateralTopBulletCollision(){
				for(var i=0;i<lateralTopBullets.length;i++){
					if(rectRectCollision(player, lateralTopBullets[i])&& invulnerability==false){
						lateralTopBullets.splice(i, 1);
						death();
					}
				}
			}
			
			function playerLateralBottomBulletCollision(){
				for(var i=0;i<lateralBottomBullets.length;i++){
					if(rectRectCollision(player, lateralBottomBullets[i])&& invulnerability==false){
						lateralBottomBullets.splice(i, 1);
						death();
					}
				}
			}
			
			function playerLateralCollision(){
				for(var i=0;i<lateralEnemies.length;i++){
					if(rectRectCollision(player, lateralEnemies[i])&& invulnerability==false){	
						death();
					}
				}
			}
			
			function beamLateralTopBulletCollision(){
				for(var i=playerBullets.length-1;i>=0;i--){
					if(playerBullets[i].tag==14){
						for(var k=lateralTopBullets.length-1;k>=0;k--){
							if(rectRectCollision(playerBullets[i], lateralTopBullets[k])&& invulnerability==false){
								lateralTopBullets.splice(k, 1);
							}
						}
					}
				}
			}
			
			function beamLateralBottomBulletCollision(){
				for(var i=playerBullets.length-1;i>=0;i--){
					if(playerBullets[i].tag==14){
						for(var k=lateralBottomBullets.length-1;k>=0;k--){
							if(rectRectCollision(playerBullets[i], lateralBottomBullets[k])&& invulnerability==false){
								lateralBottomBullets.splice(k, 1);
							}
						}
					}
				}
			}
			
			function bouncerOut(){
				for(var i=0;i<bouncerEnemies.length;i++){
					if(bouncerEnemies[i].y>576){
						bouncerEnemies.splice(i, 1);
					}
				}
			}
			
			function bouncerBulletCollision(){
				for(var i=playerBullets.length-1;i>=0;i--){
					for(var k=bouncerEnemies.length-1;k>=0;k--){
						if((rectRectCollision(playerBullets[i], bouncerEnemies[k]) || rectCircCollision(bouncerEnemies[k], playerBullets[i]))&& invulnerability==false){
							bouncerEnemies[k].health-=bulletDamage;
							if(bouncerEnemies[k].health<=-2*enemyMultiplier){
								bouncerEnemies.splice(k, 1);
								points+=20*enemyMultiplier;
							}
							if(playerBullets[i].tag!=14 && playerBullets[i].type!="melee"){
								playerBullets.splice(i, 1);
							}
						}
					}
				}
			}
			
			function playerBouncerCollision(){
				for(var i=0;i<bouncerEnemies.length;i++){
					if(rectRectCollision(player, bouncerEnemies[i])&& invulnerability==false){
						death();
					}
				}
			}
			
			function snakeOut(){
				for(var i=0;i<snakeEnemies.length;i++){
					if(snakeEnemies[i].x+20<0){
						snakeEnemies.splice(i, 1);
					}
				}
			}
			
			function snakeBulletCollision(){
				for(var i=playerBullets.length-1;i>=0;i--){
					for(var k=snakeEnemies.length-1;k>=0;k--){
						if((rectRectCollision(playerBullets[i], snakeEnemies[k]) || rectCircCollision(snakeEnemies[k], playerBullets[i]))&& invulnerability==false){
							snakeEnemies[k].health-=bulletDamage;
							if(snakeEnemies[k].health<=-2*enemyMultiplier){
								snakeEnemies.splice(k, 1);
								points+=20*enemyMultiplier;
							}
							if(playerBullets[i].tag!=14 && playerBullets[i].type!="melee"){
								playerBullets.splice(i, 1);
							}
						}
					}
				}
			}
			
			function playerSnakeCollision(){
				for(var i=0;i<snakeEnemies.length;i++){
					if(rectRectCollision(player, snakeEnemies[i])&& invulnerability==false){
						death();
					}
				}
			}
			
			function blobOut(){
				for(var i=0;i<blob1Enemies.length;i++){
					if(blob1Enemies[i].x+40<0){
						blob1Enemies.splice(i, 1);
					}
				}
				for(var i=0;i<blobTop2Enemies.length;i++){
					if(blobTop2Enemies[i].x+28<0){
						blobTop2Enemies.splice(i, 1);
					}
				}
				for(var i=0;i<blobBottom2Enemies.length;i++){
					if(blobBottom2Enemies[i].x+28<0){
						blobBottom2Enemies.splice(i, 1);
					}
				}
				for(var i=0;i<blobTop3Enemies.length;i++){
					if(blobTop3Enemies[i].x+20<0){
						blobTop3Enemies.splice(i, 1);
					}
				}
				for(var i=0;i<blobBottom3Enemies.length;i++){
					if(blobBottom3Enemies[i].x+20<0){
						blobBottom3Enemies.splice(i, 1);
					}
				}
			}
			
			function blobBulletCollision(){
				for(var i=playerBullets.length-1;i>=0;i--){
					for(var k=blob1Enemies.length-1;k>=0;k--){
						if((rectRectCollision(playerBullets[i], blob1Enemies[k]) || rectCircCollision(blob1Enemies[k], playerBullets[i]))&& invulnerability==false){
							blob1Enemies[k].health-=bulletDamage;
							if(blob1Enemies[k].health<=-4*enemyMultiplier){
								points+=40*enemyMultiplier;
								x = blob1Enemies[k].x+6;
								y = blob1Enemies[k].y+6;
								blobTop2Enemies.push(new rectangleModel(28, 28, "#A6E1A1", x, y));
								blobBottom2Enemies.push(new rectangleModel(28, 28, "#A6E1A1", x, y));
								blob1Enemies.splice(k, 1);
							}
							if(playerBullets[i].tag!=14 && playerBullets[i].type!="melee"){
								playerBullets.splice(i, 1);
							}
						}
					}
					for(var k=blobTop2Enemies.length-1;k>=0;k--){
						if((rectRectCollision(playerBullets[i], blobTop2Enemies[k]) || rectCircCollision(blobTop2Enemies[k], playerBullets[i]))&& invulnerability==false){
							blobTop2Enemies[k].health-=bulletDamage;
							if(blobTop2Enemies[k].health<=-2*enemyMultiplier){
								points+=20*enemyMultiplier;
								x = blobTop2Enemies[k].x+4;
								y = blobTop2Enemies[k].y+4;
								blobTop3Enemies.push(new rectangleModel(20, 20, "#A6E1A1", x, y));
								blobBottom3Enemies.push(new rectangleModel(20, 20, "#A6E1A1", x, y));
								blobTop2Enemies.splice(k, 1);
							}
							if(playerBullets[i].tag!=14 && playerBullets[i].type!="melee"){
								playerBullets.splice(i, 1);
							}
						}
					}
					for(var k=blobBottom2Enemies.length-1;k>=0;k--){
						if((rectRectCollision(playerBullets[i], blobBottom2Enemies[k]) || rectCircCollision(blobBottom2Enemies[k], playerBullets[i]))&& invulnerability==false){
							blobBottom2Enemies[k].health-=bulletDamage;
							if(blobBottom2Enemies[k].health<=-2*enemyMultiplier){
								points+=20*enemyMultiplier;
								x = blobBottom2Enemies[k].x+4;
								y = blobBottom2Enemies[k].y+4;
								blobTop3Enemies.push(new rectangleModel(20, 20, "#A6E1A1", x, y));
								blobBottom3Enemies.push(new rectangleModel(20, 20, "#A6E1A1", x, y));
								blobBottom2Enemies.splice(k, 1);
							}
							if(playerBullets[i].tag!=14 && playerBullets[i].type!="melee"){
								playerBullets.splice(i, 1);
							}
						}
					}
					for(var k=blobTop3Enemies.length-1;k>=0;k--){
						if((rectRectCollision(playerBullets[i], blobTop3Enemies[k]) || rectCircCollision(blobTop3Enemies[k], playerBullets[i]))&& invulnerability==false){
							blobTop3Enemies[k].health-=bulletDamage;
							if(blobTop3Enemies[k].health<=-1*enemyMultiplier){
								blobTop3Enemies.splice(k, 1);
								points+=10*enemyMultiplier;
							}
							if(playerBullets[i].tag!=14 && playerBullets[i].type!="melee"){
								playerBullets.splice(i, 1);
							}
						}
					}
					for(var k=blobBottom3Enemies.length-1;k>=0;k--){
						if((rectRectCollision(playerBullets[i], blobBottom3Enemies[k]) || rectCircCollision(blobBottom3Enemies[k], playerBullets[i]))&& invulnerability==false){
							blobBottom3Enemies[k].health-=bulletDamage;
							if(blobBottom3Enemies[k].health<=-1*enemyMultiplier){
								blobBottom3Enemies.splice(k, 1);
								points+=10*enemyMultiplier;
							}
							if(playerBullets[i].tag!=14 && playerBullets[i].type!="melee"){
								playerBullets.splice(i, 1);
							}
						}
					}
				}
			}
			
			function playerBlobCollision(){
				for(var i=0;i<blob1Enemies.length;i++){
					if(rectRectCollision(player, blob1Enemies[i])&& invulnerability==false){
						death();
					}
				}
				for(var i=0;i<blobTop2Enemies.length;i++){
					if(rectRectCollision(player, blobTop2Enemies[i])&& invulnerability==false){
						death();
					}
				}
				for(var i=0;i<blobBottom2Enemies.length;i++){
					if(rectRectCollision(player, blobBottom2Enemies[i])&& invulnerability==false){
						death();
					}
				}
				for(var i=0;i<blobTop3Enemies.length;i++){
					if(rectRectCollision(player, blobTop3Enemies[i])&& invulnerability==false){
						death();
					}
				}
				for(var i=0;i<blobBottom3Enemies.length;i++){
					if(rectRectCollision(player, blobBottom3Enemies[i])&& invulnerability==false){
						death();
					}
				}
			}
			
			function kamikazeBulletCollision(){
				for(var i=playerBullets.length-1;i>=0;i--){
					for(var k=kamikazeEnemies.length-1;k>=0;k--){
						if((rectRectCollision(playerBullets[i], kamikazeEnemies[k]) || rectCircCollision(kamikazeEnemies[k], playerBullets[i]))&& invulnerability==false){
							kamikazeEnemies[k].health-=bulletDamage;
							if(kamikazeEnemies[k].health<=-4*enemyMultiplier){
								kamikazeEnemies.splice(k, 1);
								points+=40*enemyMultiplier;
							}
							if(playerBullets[i].tag!=14 && playerBullets[i].type!="melee"){
								playerBullets.splice(i, 1);
							}
						}
					}
				}
			}
			
			function playerKamikazeCollision(){
				for(var i=0;i<kamikazeEnemies.length;i++){
					if(rectRectCollision(player, kamikazeEnemies[i])&& invulnerability==false){
						death();
					}
				}
			}
			
			function playerKamikazeExplosionCollision(){
				for(var i=0;i<kamikazeExplosion.length;i++){
					if(rectCircCollision(player, kamikazeExplosion[i])&& invulnerability==false){
						death();
					}
				}
			}
			
			function dashOut(){
				for(var i=0;i<dashEnemies.length;i++){
					if(dashEnemies[i].x+30<0){
						dashEnemies.splice(i, 1);
					}
				}
			}
			
			function dashBulletCollision(){
				for(var i=playerBullets.length-1;i>=0;i--){
					for(var k=dashEnemies.length-1;k>=0;k--){
						if((rectRectCollision(playerBullets[i], dashEnemies[k]) || rectCircCollision(dashEnemies[k], playerBullets[i]))&& invulnerability==false){
							dashEnemies[k].health-=bulletDamage;
							if(dashEnemies[k].health<=-2*enemyMultiplier){
								dashEnemies.splice(k, 1);
								points+=20*enemyMultiplier;
							}
							if(playerBullets[i].tag!=14 && playerBullets[i].type!="melee"){
								playerBullets.splice(i, 1);
							}
						}
					}
				}
			}
			
			function playerDashCollision(){
				for(var i=0;i<dashEnemies.length;i++){
					if(rectRectCollision(player, dashEnemies[i])&& invulnerability==false){
						death();
					}
				}
			}
			
			function flamethrowerOut(){
				for(var i=0;i<flamethrowerEnemies.length;i++){
					if(flamethrowerEnemies[i].x+25<0){
						flamethrowerEnemies.splice(i, 1);
					}
				}
			}
			
			function flamethrowerBulletCollision(){
				for(var i=playerBullets.length-1;i>=0;i--){
					for(var k=flamethrowerEnemies.length-1;k>=0;k--){
						if((rectRectCollision(playerBullets[i], flamethrowerEnemies[k]) || rectCircCollision(flamethrowerEnemies[k], playerBullets[i]))&& invulnerability==false){
							flamethrowerEnemies[k].health-=bulletDamage;
							if(flamethrowerEnemies[k].health<=-5*enemyMultiplier){
								flamethrowerEnemies.splice(k, 1);
								points+=50*enemyMultiplier;
							}
							if(playerBullets[i].tag!=14 && playerBullets[i].type!="melee"){
								playerBullets.splice(i, 1);
							}
						}
					}
				}
			}
			
			function playerFlamethrowerBulletCollision(){
				for(var i=0;i<flamethrowerBullets.length;i++){
					if(rectCircCollision(player, flamethrowerBullets[i])&& invulnerability==false){
						death();
					}
				}
			}
			
			function playerFlamethrowerCollision(){
				for(var i=0;i<flamethrowerEnemies.length;i++){
					if(rectRectCollision(player, flamethrowerEnemies[i])&& invulnerability==false){
						death();
					}
				}
			}
			
			function barrierOut(){
				for(var i=0;i<barrierEnemies.length;i++){
					if(barrierEnemies[i].x+20<0){
						barrierEnemies.splice(i, 1);
						barrierLazer.splice(i, 1);
					}
				}
			}
			function barrierBulletCollision(){
				for(var i=playerBullets.length-1;i>=0;i--){
					for(var k=barrierEnemies.length-1;k>=0;k--){
						if((rectRectCollision(playerBullets[i], barrierEnemies[k]) || rectCircCollision(barrierEnemies[k], playerBullets[i]))&& invulnerability==false){
							barrierEnemies[k].health-=bulletDamage;
							if(barrierEnemies[k].health<=-4*enemyMultiplier){
								barrierEnemies.splice(k, 1);
								barrierLazer.splice(k, 1);
								points+=40*enemyMultiplier;
							}
							if(playerBullets[i].tag!=14 && playerBullets[i].type!="melee"){
								playerBullets.splice(i, 1);
							}
						}
					}
				}
			}
			
			function playerBarrierLazerCollision(){
				for(var i=0;i<barrierLazer.length;i++){
					if(rectRectCollision(player, barrierLazer[i])&& invulnerability==false){
						death();
					}
				}
			}
			
			function playerBarrierCollision(){
				for(var i=0;i<barrierEnemies.length;i++){
					if(rectRectCollision(player, barrierEnemies[i])&& invulnerability==false){
						death();
					}
				}
			}
			
			function entityOut(){
				for(var i=0;i<entity.length;i++){
					if(entity[i].tag==15){
						if(entity[i].x+150<0){
							entity.splice(i);
							entityBullets.splice(i);
						}
					}
				}
			}
			
			function entityBulletOut(){
				for(var i=0;i<entityBullets.length;i++){
					if(entityBullets[i].x<-1024 || entityBullets[i].y<-100 || entityBullets[i].y>676){
						entityBullets.splice(i, 1);
					}
				}
			}
			
			function entityBulletCollision(){
				for(var i=playerBullets.length-1;i>=0;i--){
					for(var k=entity.length-1;k>=0;k--){
						if((rectRectCollision(playerBullets[i], entity[k]) || rectCircCollision(entity[k], playerBullets[i]))&& invulnerability==false){
							if(entity[k].tag!=15 && entity[k].tag%2==1){
								entity[k].health-=bulletDamage;
								if(entity[k].health<=-4*enemyMultiplier){
									if(entity[k].tag==29){
										for(var j=entityBullets.length-1;j>=0;j--){
											if(entityBullets[j].tag==44){
												entityBullets.splice(j, 1);
											}
										}
									}
									entity.splice(k, 1);
									points+=40*enemyMultiplier;
								}
							}
							if(entity[k].tag==15){
								if(gunType==1){
									entity[k].health-=bulletDamage*2;
								}
								if(gunType==2){
									entity[k].health-=bulletDamage*3;
								}
								if(gunType==3){
									entity[k].health-=bulletDamage*1.5;
								}
								if(gunType==4){
									entity[k].health-=bulletDamage/3;
								}
								if(gunType==5){
									entity[k].health-=bulletDamage*3;
								}
								if(gunType==6){
									entity[k].health-=bulletDamage/6;
								}
								if(gunType==7){
									entity[k].health-=bulletDamage/2;
								}
								if(entity[k].health<=-50*enemyMultiplier){
									entity.splice(k);
									for(var j=entityBullets.length-1;j>=0;j--){
										if(entityBullets[j].tag==44){
											entityBullets.splice(j, 1);
										}
									}
									points+=500*enemyMultiplier;
								}
							}
							if(playerBullets[i].tag!=14 && playerBullets[i].type!="melee"){
								playerBullets.splice(i, 1);
							}
						}
					}
				}
			}
			
			function playerEntityBulletCollision(){
				for(var i=0;i<entityBullets.length;i++){
					if((rectRectCollision(player, entityBullets[i]) || rectCircCollision(player, entityBullets[i])) && invulnerability==false){
						if(entityBullets[i].tag!=44 && entityBullets[i].tag!=43){
							entityBullets.splice(i, 1);
						}
						death();
					}
				}
			}
			
			function playerEntityCollision(){
				for(var i=0;i<entity.length;i++){
					if(rectRectCollision(player, entity[i])&& invulnerability==false){
						death();
					}
				}
			}
			
			function beamEntityBulletCollision(){
				for(var i=playerBullets.length-1;i>=0;i--){
					if(playerBullets[i].tag==14){
						for(var k=entityBullets.length-1;k>=0;k--){
							if(rectRectCollision(playerBullets[i], entityBullets[k])&& invulnerability==false){
								if(entityBullets[k].tag!=44){
									entityBullets.splice(k, 1);
								}
							}
						}
					}
				}
			}
			
			//pick-up functions
			function getPickUp(){
				for(var i=0;i<pickUps.length;i++){
					if(rectCircCollision(player, pickUps[i])){
						if(pickUps[i].type=="lazer"){
							gunType = 1;
							bulletDamage = 1;
						}
						if(pickUps[i].type=="machine gun"){
							gunType = 2;
							bulletDamage = 0.6;
						}
						if(pickUps[i].type=="split"){
							gunType = 3;
							bulletDamage = 1.6;
						}
						if(pickUps[i].type=="shotgun"){
							gunType = 4;
							bulletDamage = 0.75;
						}
						if(pickUps[i].type=="nova"){
							gunType = 5;
							bulletDamage = 2.6;
						}
						if(pickUps[i].type=="melee"){
							gunType = 6;
							bulletDamage = 0.5;
						}
						if(pickUps[i].type=="beam"){
							gunType = 7;
							bulletDamage = 0.2;
						}
						pickUps.splice(i, 1);
					}
				}
				if(gunType==0){
					bulletDamage = 0.5;
				}
			}
			
			function pickUpOut(){
				for(var i=0;i<pickUps.length;i++){
					if(pickUps[i].x+9<0){
						pickUps.splice(i, 1);
					}
				}
			}
			
			//base functions
			function rectangleModel(width, height, color, x, y, type){
				this.type = type;
				this.width = width;
				this.height = height;
				this.x = x;
				this.y = y; 
				this.color = color;
				this.speedX = 0;
				this.speedY = 0;
				this.frameNum = 0;
				this.health = 0;
				this.snakeCycle = 0;
				this.hasSpread = false;
				this.spread = 0;
				this.tag = 0;
				this.dash = false;
				this.entityShooting = false;
				this.update = function(){
					ctx = gameArea.context;
					if(this.type=="text"){
						ctx.font = this.width + " " + this.height;
						ctx.fillStyle = this.color;
						ctx.fillText(this.text, this.x, this.y);
					}else{
						ctx.fillStyle = this.color;
						ctx.fillRect(this.x, this.y, this.width, this.height);
					}
				}
				this.newPos = function(){
					this.x += this.speedX;
					this.y += this.speedY;
				}
			}
			
			function circleModel(x, y, r, startAngle, endAngle, color, type){
				this.x = x;
				this.y = y;
				this.r = r;
				this.startAngle = startAngle;
				this.endAngle = endAngle;
				this.color = color;
				this.type = type;
				this.frameNum = 0;
				this.hasSpread = false;
				this.spread = 0;
				this.update = function(){
					ctx = gameArea.context;
					ctx.beginPath();
					ctx.arc(this.x, this.y, this.r, this.startAngle, this.endAngle);
					ctx.fillStyle = this.color;
					ctx.fill();
					ctx.lineWidth = 1;
					ctx.strokeStyle = this.color;
					ctx.stroke();
				}
			}
			
			function rectRectCollision(rect1, rect2){
				if(rect1.x < rect2.x + rect2.width && rect1.x + rect1.width > rect2.x && rect1.y < rect2.y + rect2.height && rect1.y + rect1.height > rect2.y){
					return true;
				}else{
					return false;
				}
			}
			
			function rectCircCollision(rect, circle){
				distX = Math.abs(circle.x-(rect.x+rect.width/2));
				distY = Math.abs(circle.y-(rect.y+rect.width/2));
				if(distX>((rect.width/2)+circle.r)){
					return false; 
				}
				if(distY>((rect.height/2)+circle.r)){
					return false;
				}
				if(distX<=((rect.width/2)+circle.r)){ 
					return true; 
				} 
				if(distY<=((rect.height/2)+circle.r)) { 
					return true; 
				}
				diagX=distX-rect.width/2;
				diagY=distY-rect.height/2;
				return (diagX*diagX+diagY*diagY<=(circle.r*circle.r));
			}
			
			function frameInterval(a){
				if(gameArea.frameNum%a==0){
					return true;
				}else{
					return false;
				}
			}
			
			function randomInt(min, max){
				return Math.floor(Math.random() * (max - min + 1) ) + min;
			}
			
			function randomFloat(min, max) {
				return Math.random() * (max - min) + min;
			}
		</script>
	</body>
</html>
